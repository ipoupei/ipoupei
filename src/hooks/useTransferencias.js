import { useState, useCallback } from 'react';
import { supabase } from '../lib/supabaseClient';
import useAuth from './useAuth';

/**
 * Hook personalizado para gerenciar transfer√™ncias entre contas
 * VERS√ÉO ATUALIZADA - Permite saldo negativo e garante grava√ß√£o no banco
 */
const useTransferencias = () => {
  // Estados
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Hook de autentica√ß√£o
  const { user, isAuthenticated } = useAuth();

  // Realiza uma transfer√™ncia entre contas - VERS√ÉO COM SALDO NEGATIVO
  const realizarTransferencia = useCallback(async (dadosTransferencia) => {
    if (!isAuthenticated || !user) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }

    const { contaOrigemId, contaDestinoId, valor, descricao } = dadosTransferencia;

    // Valida√ß√µes b√°sicas
    if (!contaOrigemId || !contaDestinoId) {
      return { success: false, error: 'Contas de origem e destino s√£o obrigat√≥rias' };
    }

    if (contaOrigemId === contaDestinoId) {
      return { success: false, error: 'Conta de origem e destino n√£o podem ser iguais' };
    }

    if (!valor || valor <= 0) {
      return { success: false, error: 'Valor deve ser maior que zero' };
    }

    try {
      setLoading(true);
      setError(null);

      console.log('üîÑ Iniciando transfer√™ncia com saldo negativo permitido...', {
        origem: contaOrigemId,
        destino: contaDestinoId,
        valor: valor,
        usuario: user.id
      });

      // 1. BUSCA E VALIDA AS CONTAS
      const { data: contas, error: contasError } = await supabase
        .from('contas')
        .select('id, nome, saldo, ativo')
        .in('id', [contaOrigemId, contaDestinoId])
        .eq('usuario_id', user.id);

      if (contasError) {
        console.error('‚ùå Erro ao buscar contas:', contasError);
        throw new Error('Erro ao buscar contas: ' + contasError.message);
      }

      if (!contas || contas.length !== 2) {
        throw new Error('Uma ou ambas as contas n√£o foram encontradas');
      }

      const contaOrigem = contas.find(c => c.id === contaOrigemId);
      const contaDestino = contas.find(c => c.id === contaDestinoId);

      if (!contaOrigem || !contaDestino) {
        throw new Error('Contas n√£o encontradas');
      }

      if (!contaOrigem.ativo || !contaDestino.ativo) {
        throw new Error('Uma das contas est√° inativa');
      }

      console.log('‚úÖ Contas validadas:', {
        origem: { nome: contaOrigem.nome, saldo: contaOrigem.saldo },
        destino: { nome: contaDestino.nome, saldo: contaDestino.saldo }
      });

      // 2. AVISO SOBRE SALDO NEGATIVO (mas n√£o impede a transfer√™ncia)
      let avisoSaldoNegativo = null;
      if (contaOrigem.saldo < valor) {
        const novoSaldoOrigem = contaOrigem.saldo - valor;
        avisoSaldoNegativo = `A conta ${contaOrigem.nome} ficar√° com saldo negativo: R$ ${novoSaldoOrigem.toFixed(2)}`;
        console.log('‚ö†Ô∏è Aviso:', avisoSaldoNegativo);
      }

      // 3. EXECUTA A TRANSFER√äNCIA (SEMPRE MANUAL PARA GARANTIR GRAVA√á√ÉO)
      console.log('üîÑ Executando transfer√™ncia manual garantida...');

      const novoSaldoOrigem = contaOrigem.saldo - valor;
      const novoSaldoDestino = contaDestino.saldo + valor;
      const agora = new Date().toISOString();

      // 3.1 Atualiza saldo da conta origem
      console.log('üì§ Atualizando conta origem...', { id: contaOrigemId, novoSaldo: novoSaldoOrigem });
      
      const { data: origemData, error: origemError } = await supabase
        .from('contas')
        .update({ 
          saldo: novoSaldoOrigem,
          updated_at: agora
        })
        .eq('id', contaOrigemId)
        .eq('usuario_id', user.id)
        .select();

      if (origemError) {
        console.error('‚ùå Erro ao atualizar conta origem:', origemError);
        throw new Error('Erro ao debitar da conta origem: ' + origemError.message);
      }

      if (!origemData || origemData.length === 0) {
        throw new Error('Falha ao atualizar conta origem - nenhum registro afetado');
      }

      console.log('‚úÖ Conta origem atualizada:', origemData[0]);

      // 3.2 Atualiza saldo da conta destino
      console.log('üì• Atualizando conta destino...', { id: contaDestinoId, novoSaldo: novoSaldoDestino });

      const { data: destinoData, error: destinoError } = await supabase
        .from('contas')
        .update({ 
          saldo: novoSaldoDestino,
          updated_at: agora
        })
        .eq('id', contaDestinoId)
        .eq('usuario_id', user.id)
        .select();

      if (destinoError) {
        console.error('‚ùå Erro ao atualizar conta destino:', destinoError);
        
        // ROLLBACK: Reverte a conta origem
        console.log('üîÑ Fazendo rollback da conta origem...');
        await supabase
          .from('contas')
          .update({ 
            saldo: contaOrigem.saldo,
            updated_at: agora
          })
          .eq('id', contaOrigemId)
          .eq('usuario_id', user.id);
        
        throw new Error('Erro ao creditar na conta destino: ' + destinoError.message);
      }

      if (!destinoData || destinoData.length === 0) {
        // ROLLBACK: Reverte a conta origem
        console.log('üîÑ Fazendo rollback da conta origem...');
        await supabase
          .from('contas')
          .update({ 
            saldo: contaOrigem.saldo,
            updated_at: agora
          })
          .eq('id', contaOrigemId)
          .eq('usuario_id', user.id);
          
        throw new Error('Falha ao atualizar conta destino - nenhum registro afetado');
      }

      console.log('‚úÖ Conta destino atualizada:', destinoData[0]);

      // 3.3 FOR√áA a grava√ß√£o das transa√ß√µes de hist√≥rico
      console.log('üìù Criando transa√ß√µes de hist√≥rico...');

      const transacoes = [
        {
          usuario_id: user.id,
          conta_id: contaOrigemId,
          tipo: 'despesa',
          categoria: 'transferencia',
          descricao: descricao || `Transfer√™ncia para ${contaDestino.nome}`,
          valor: valor,
          data: agora,
          created_at: agora,
          updated_at: agora
        },
        {
          usuario_id: user.id,
          conta_id: contaDestinoId,
          tipo: 'receita',
          categoria: 'transferencia',
          descricao: descricao || `Transfer√™ncia de ${contaOrigem.nome}`,
          valor: valor,
          data: agora,
          created_at: agora,
          updated_at: agora
        }
      ];

      const { data: transacoesData, error: transacoesError } = await supabase
        .from('transacoes')
        .insert(transacoes)
        .select();

      if (transacoesError) {
        console.error('‚ö†Ô∏è Erro ao criar transa√ß√µes de hist√≥rico:', transacoesError);
        // N√£o falha a transfer√™ncia por causa do hist√≥rico, mas avisa
      } else {
        console.log('‚úÖ Transa√ß√µes de hist√≥rico criadas:', transacoesData?.length || 0, 'registros');
      }

      // 3.4 OPCIONALMENTE, salva na tabela de transfer√™ncias (se existir)
      try {
        console.log('üìã Tentando salvar registro de transfer√™ncia...');
        
        const { data: transferData, error: transferError } = await supabase
          .from('transferencias')
          .insert([{
            usuario_id: user.id,
            conta_origem_id: contaOrigemId,
            conta_destino_id: contaDestinoId,
            valor: valor,
            descricao: descricao || `Transfer√™ncia de ${contaOrigem.nome} para ${contaDestino.nome}`,
            data: agora,
            created_at: agora,
            updated_at: agora
          }])
          .select();

        if (transferError) {
          console.log('‚ö†Ô∏è Tabela transfer√™ncias n√£o existe ou erro:', transferError.message);
        } else {
          console.log('‚úÖ Registro de transfer√™ncia salvo:', transferData?.[0]?.id);
        }
      } catch (transferErr) {
        console.log('‚ö†Ô∏è Erro ao salvar na tabela transfer√™ncias (ignorado):', transferErr.message);
      }

      // 4. SUCESSO COMPLETO!
      console.log('üéâ Transfer√™ncia conclu√≠da com sucesso!');

      let mensagemSucesso = `Transfer√™ncia de ${formatCurrency(valor)} realizada com sucesso!`;
      if (avisoSaldoNegativo) {
        mensagemSucesso += `\n‚ö†Ô∏è ${avisoSaldoNegativo}`;
      }

      return {
        success: true,
        message: mensagemSucesso,
        aviso: avisoSaldoNegativo,
        data: {
          contaOrigem: contaOrigem.nome,
          contaDestino: contaDestino.nome,
          valor: valor,
          novoSaldoOrigem: novoSaldoOrigem,
          novoSaldoDestino: novoSaldoDestino,
          saldoOrigemNegativo: novoSaldoOrigem < 0
        }
      };

    } catch (err) {
      console.error('‚ùå Erro na transfer√™ncia:', err);
      const errorMessage = err.message || 'N√£o foi poss√≠vel realizar a transfer√™ncia. Tente novamente.';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  }, [isAuthenticated, user]);

  // Fun√ß√£o auxiliar para formatar moeda
  const formatCurrency = (value) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  };

  // Busca hist√≥rico de transfer√™ncias (das transa√ß√µes)
  const buscarHistorico = useCallback(async (limite = 50) => {
    if (!isAuthenticated || !user) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }

    try {
      setLoading(true);
      setError(null);

      // Busca das transa√ß√µes de transfer√™ncia
      const { data: transacoes, error: transacoesError } = await supabase
        .from('transacoes')
        .select(`
          *,
          conta:contas(id, nome, tipo)
        `)
        .eq('usuario_id', user.id)
        .eq('categoria', 'transferencia')
        .order('created_at', { ascending: false })
        .limit(limite);

      if (transacoesError) {
        throw transacoesError;
      }

      // Tenta buscar da tabela de transfer√™ncias tamb√©m (se existir)
      let transferenciasEspecificas = [];
      try {
        const { data: transfers, error: transfersError } = await supabase
          .from('transferencias')
          .select(`
            *,
            conta_origem:contas!transferencias_conta_origem_id_fkey(id, nome),
            conta_destino:contas!transferencias_conta_destino_id_fkey(id, nome)
          `)
          .eq('usuario_id', user.id)
          .order('created_at', { ascending: false })
          .limit(limite);

        if (!transfersError && transfers) {
          transferenciasEspecificas = transfers;
          console.log('‚úÖ Encontradas transfer√™ncias espec√≠ficas:', transfers.length);
        }
      } catch (err) {
        console.log('‚ö†Ô∏è Tabela transfer√™ncias n√£o dispon√≠vel:', err.message);
      }

      return { 
        success: true, 
        data: {
          transacoes: transacoes || [],
          transferencias: transferenciasEspecificas
        }
      };

    } catch (err) {
      console.error('‚ùå Erro ao buscar hist√≥rico:', err);
      const errorMessage = 'N√£o foi poss√≠vel carregar o hist√≥rico de transfer√™ncias.';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  }, [isAuthenticated, user]);

  // Fun√ß√£o para verificar se uma transfer√™ncia foi gravada corretamente
  const verificarTransferencia = useCallback(async (contaOrigemId, contaDestinoId, valor) => {
    if (!isAuthenticated || !user) return false;

    try {
      // Verifica se as contas foram atualizadas recentemente
      const { data: contas, error } = await supabase
        .from('contas')
        .select('id, nome, saldo, updated_at')
        .in('id', [contaOrigemId, contaDestinoId])
        .eq('usuario_id', user.id);

      if (error || !contas || contas.length !== 2) {
        return false;
      }

      // Verifica se foram atualizadas nos √∫ltimos 30 segundos
      const agora = new Date();
      const trinta_segundos_atras = new Date(agora.getTime() - 30000);

      const contasAtualizadas = contas.filter(conta => {
        const updated = new Date(conta.updated_at);
        return updated > trinta_segundos_atras;
      });

      console.log('üîç Verifica√ß√£o de transfer√™ncia:', {
        contasEncontradas: contas.length,
        contasAtualizadas: contasAtualizadas.length,
        contas: contas.map(c => ({ nome: c.nome, saldo: c.saldo, updated: c.updated_at }))
      });

      return contasAtualizadas.length === 2;
    } catch (err) {
      console.error('‚ùå Erro na verifica√ß√£o:', err);
      return false;
    }
  }, [isAuthenticated, user]);

  return {
    loading,
    error,
    realizarTransferencia,
    buscarHistorico,
    verificarTransferencia,
    setError
  };
};

export default useTransferencias;