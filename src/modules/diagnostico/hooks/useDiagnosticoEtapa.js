// src/modules/diagnostico/hooks/useDiagnosticoEtapa.js
import { useState, useCallback } from 'react';
import { supabase } from '@lib/supabaseClient';
import useAuth from '@modules/auth/hooks/useAuth';

const useDiagnosticoEtapa = () => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // ‚úÖ Fun√ß√£o para determinar a coluna correta do usu√°rio
  const getUserColumn = () => {
    // ‚úÖ CORRETO: Para a tabela perfil_usuario, usar 'id'
    return 'id';
  };

  // ‚úÖ Fun√ß√£o para atualizar etapa atual no banco
  const atualizarEtapaAtual = useCallback(async (numeroEtapa) => {
    if (!user?.id) {
      console.warn('‚ö†Ô∏è Usu√°rio n√£o autenticado - n√£o √© poss√≠vel salvar etapa');
      return false;
    }

    try {
      setLoading(true);
      setError(null);

      console.log(`üìù Atualizando etapa atual do diagn√≥stico para: ${numeroEtapa}`);

      const userColumn = getUserColumn();
      
      const { data, error: updateError } = await supabase
        .from('perfil_usuario')
        .update({ 
          diagnostico_etapa_atual: numeroEtapa,
          updated_at: new Date().toISOString()
        })
        .eq(userColumn, user.id) // ‚úÖ Usar a coluna correta
        .select('diagnostico_etapa_atual');

      if (updateError) {
        console.error('‚ùå Erro ao atualizar etapa do diagn√≥stico:', updateError);
        setError(updateError.message);
        return false;
      }

      console.log('‚úÖ Etapa do diagn√≥stico atualizada com sucesso:', data);
      return true;

    } catch (err) {
      console.error('‚ùå Erro inesperado ao atualizar etapa:', err);
      setError(err.message);
      return false;
    } finally {
      setLoading(false);
    }
  }, [user?.id]);

  // ‚úÖ Fun√ß√£o para buscar etapa atual do banco
  const buscarEtapaAtual = useCallback(async () => {
    if (!user?.id) {
      console.warn('‚ö†Ô∏è Usu√°rio n√£o autenticado - n√£o √© poss√≠vel buscar etapa');
      return null;
    }

    try {
      setLoading(true);
      setError(null);

      const userColumn = getUserColumn();

      const { data, error: fetchError } = await supabase
        .from('perfil_usuario')
        .select('diagnostico_etapa_atual')
        .eq(userColumn, user.id) // ‚úÖ Usar a coluna correta
        .single();

      if (fetchError) {
        console.error('‚ùå Erro ao buscar etapa atual:', fetchError);
        setError(fetchError.message);
        return null;
      }

      console.log('üìã Etapa atual encontrada:', data?.diagnostico_etapa_atual);
      return data?.diagnostico_etapa_atual || 0;

    } catch (err) {
      console.error('‚ùå Erro inesperado ao buscar etapa:', err);
      setError(err.message);
      return null;
    } finally {
      setLoading(false);
    }
  }, [user?.id]);

  // ‚úÖ Fun√ß√£o para marcar diagn√≥stico como completo
  const marcarDiagnosticoCompleto = useCallback(async () => {
    if (!user?.id) {
      console.warn('‚ö†Ô∏è Usu√°rio n√£o autenticado - n√£o √© poss√≠vel marcar como completo');
      return false;
    }

    try {
      setLoading(true);
      setError(null);

      console.log('üèÅ Marcando diagn√≥stico como completo');

      const userColumn = getUserColumn();

      const { data, error: updateError } = await supabase
        .from('perfil_usuario')
        .update({ 
          diagnostico_etapa_atual: -1, // -1 indica completo
          diagnostico_completo_em: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq(userColumn, user.id) // ‚úÖ Usar a coluna correta
        .select('diagnostico_etapa_atual, diagnostico_completo_em');

      if (updateError) {
        console.error('‚ùå Erro ao marcar diagn√≥stico como completo:', updateError);
        setError(updateError.message);
        return false;
      }

      console.log('‚úÖ Diagn√≥stico marcado como completo:', data);
      return true;

    } catch (err) {
      console.error('‚ùå Erro inesperado ao marcar como completo:', err);
      setError(err.message);
      return false;
    } finally {
      setLoading(false);
    }
  }, [user?.id]);

  return {
    atualizarEtapaAtual,
    buscarEtapaAtual,
    marcarDiagnosticoCompleto,
    loading,
    error
  };
};

export default useDiagnosticoEtapa;