import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { 
  X, 
  Plus, 
  Edit3, 
  Trash2, 
  Check, 
  Clock, 
  AlertCircle,
  TrendingUp,
  TrendingDown,
  Calendar,
  DollarSign,
  Tag,
  CreditCard,
  Landmark,
  MoreHorizontal
} from 'lucide-react';
import { format } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { formatCurrency } from '../utils/formatCurrency';

/**
 * Modal para exibir detalhes das movimentações de um dia específico
 * Permite visualizar, editar e excluir transações
 */
const DetalhesDoDiaModal = ({ isOpen, onClose, dia }) => {
  const [movimentacoes, setMovimentacoes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [editingId, setEditingId] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);
  
  // Dados mockados para demonstração
  const movimentacoesMock = [
    {
      id: 1,
      tipo: 'receita',
      descricao: 'Salário',
      valor: 3500.00,
      categoria: 'Trabalho',
      conta: 'Nubank',
      status: 'pago',
      hora: '09:00',
      observacoes: 'Pagamento mensal'
    },
    {
      id: 2,
      tipo: 'despesa',
      descricao: 'Supermercado',
      valor: 156.78,
      categoria: 'Alimentação',
      conta: 'Cartão Itaú',
      status: 'pago',
      hora: '14:30',
      observacoes: 'Compras da semana'
    },
    {
      id: 3,
      tipo: 'despesa',
      descricao: 'Conta de Luz',
      valor: 89.50,
      categoria: 'Casa',
      conta: 'Conta Corrente',
      status: 'pendente',
      hora: '16:45',
      observacoes: 'Vencimento hoje'
    },
    {
      id: 4,
      tipo: 'receita',
      descricao: 'Freelance',
      valor: 800.00,
      categoria: 'Trabalho Extra',
      conta: 'Pix',
      status: 'programado',
      hora: '18:00',
      observacoes: 'Projeto web'
    }
  ];

  // Carrega movimentações quando o modal abre
  useEffect(() => {
    if (isOpen && dia) {
      setLoading(true);
      // Simulando carregamento de dados
      setTimeout(() => {
        setMovimentacoes(movimentacoesMock);
        setLoading(false);
      }, 500);
    }
  }, [isOpen, dia]);

  // Fecha o modal e limpa estados
  const handleClose = () => {
    setEditingId(null);
    setShowAddForm(false);
    onClose();
  };

  // Calcula totais
  const totalReceitas = movimentacoes
    .filter(mov => mov.tipo === 'receita')
    .reduce((acc, mov) => acc + mov.valor, 0);
  
  const totalDespesas = movimentacoes
    .filter(mov => mov.tipo === 'despesa')
    .reduce((acc, mov) => acc + mov.valor, 0);
  
  const saldoDia = totalReceitas - totalDespesas;

  // Handlers
  const handleEdit = (id) => {
    setEditingId(id);
  };

  const handleDelete = (id) => {
    if (window.confirm('Tem certeza que deseja excluir esta movimentação?')) {
      setMovimentacoes(prev => prev.filter(mov => mov.id !== id));
    }
  };

  const handleStatusChange = (id, novoStatus) => {
    setMovimentacoes(prev => 
      prev.map(mov => 
        mov.id === id ? { ...mov, status: novoStatus } : mov
      )
    );
  };

  const handleAddNew = () => {
    setShowAddForm(true);
  };

  // Componente de item de movimentação
  const MovimentacaoItem = ({ movimentacao }) => {
    const isReceita = movimentacao.tipo === 'receita';
    const [showOptions, setShowOptions] = useState(false);
    
    const getStatusIcon = () => {
      switch (movimentacao.status) {
        case 'pago':
          return <Check size={16} className="text-green-600" />;
        case 'pendente':
          return <Clock size={16} className="text-yellow-600" />;
        case 'programado':
          return <Calendar size={16} className="text-blue-600" />;
        default:
          return <AlertCircle size={16} className="text-gray-400" />;
      }
    };

    const getStatusColor = () => {
      switch (movimentacao.status) {
        case 'pago':
          return 'bg-green-50 text-green-700 border-green-200';
        case 'pendente':
          return 'bg-yellow-50 text-yellow-700 border-yellow-200';
        case 'programado':
          return 'bg-blue-50 text-blue-700 border-blue-200';
        default:
          return 'bg-gray-50 text-gray-700 border-gray-200';
      }
    };

    const getStatusText = () => {
      switch (movimentacao.status) {
        case 'pago':
          return 'Pago';
        case 'pendente':
          return 'Pendente';
        case 'programado':
          return 'Programado';
        default:
          return 'Indefinido';
      }
    };

    return (
      <div className={`
        p-4 rounded-xl border-2 transition-all duration-200
        ${isReceita ? 'bg-green-50 border-green-100' : 'bg-red-50 border-red-100'}
        hover:shadow-md hover:scale-[1.02]
      `}>
        <div className="flex items-start justify-between">
          <div className="flex items-start space-x-3 flex-1">
            {/* Ícone do tipo */}
            <div className={`
              p-2 rounded-lg
              ${isReceita ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'}
            `}>
              {isReceita ? <TrendingUp size={20} /> : <TrendingDown size={20} />}
            </div>
            
            {/* Informações principais */}
            <div className="flex-1 min-w-0">
              <div className="flex items-start justify-between mb-2">
                <div>
                  <h4 className="font-semibold text-gray-800 text-base">
                    {movimentacao.descricao}
                  </h4>
                  <p className={`
                    text-lg font-bold
                    ${isReceita ? 'text-green-600' : 'text-red-600'}
                  `}>
                    {isReceita ? '+' : '-'} {formatCurrency(movimentacao.valor)}
                  </p>
                </div>
                
                {/* Menu de opções */}
                <div className="relative">
                  <button
                    onClick={() => setShowOptions(!showOptions)}
                    className="p-1 rounded-full hover:bg-gray-100 transition-colors"
                  >
                    <MoreHorizontal size={16} className="text-gray-400" />
                  </button>
                  
                  {showOptions && (
                    <div className="absolute right-0 top-8 bg-white border border-gray-200 rounded-lg shadow-lg py-1 z-10 min-w-[140px]">
                      <button
                        onClick={() => {
                          handleEdit(movimentacao.id);
                          setShowOptions(false);
                        }}
                        className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50 flex items-center space-x-2"
                      >
                        <Edit3 size={14} />
                        <span>Editar</span>
                      </button>
                      <button
                        onClick={() => {
                          handleDelete(movimentacao.id);
                          setShowOptions(false);
                        }}
                        className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50 text-red-600 flex items-center space-x-2"
                      >
                        <Trash2 size={14} />
                        <span>Excluir</span>
                      </button>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Informações secundárias */}
              <div className="space-y-2 text-sm text-gray-600">
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-1">
                    <Tag size={12} />
                    <span>{movimentacao.categoria}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    {movimentacao.conta.includes('Cartão') ? (
                      <CreditCard size={12} />
                    ) : (
                      <Landmark size={12} />
                    )}
                    <span>{movimentacao.conta}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Clock size={12} />
                    <span>{movimentacao.hora}</span>
                  </div>
                </div>
                
                {movimentacao.observacoes && (
                  <p className="text-xs text-gray-500 italic">
                    {movimentacao.observacoes}
                  </p>
                )}
              </div>
              
              {/* Status */}
              <div className="flex items-center justify-between mt-3">
                <div className={`
                  inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium border
                  ${getStatusColor()}
                `}>
                  {getStatusIcon()}
                  <span>{getStatusText()}</span>
                </div>
                
                {/* Botões de ação rápida para status */}
                {movimentacao.status !== 'pago' && (
                  <button
                    onClick={() => handleStatusChange(movimentacao.id, 'pago')}
                    className="text-xs text-green-600 hover:text-green-700 font-medium"
                  >
                    Marcar como pago
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  if (!isOpen || !dia) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
        {/* Header do Modal */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold mb-1">
                {dia ? format(new Date(dia.ano, dia.mes, dia.dia), 'dd \'de\' MMMM', { locale: ptBR }) : 'Detalhes do Dia'}
              </h2>
              <p className="text-blue-100">
                {dia ? format(new Date(dia.ano, dia.mes, dia.dia), 'EEEE', { locale: ptBR }) : ''}
              </p>
            </div>
            <button
              onClick={handleClose}
              className="p-2 rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
            >
              <X size={24} />
            </button>
          </div>
          
          {/* Resumo do Dia */}
          <div className="grid grid-cols-3 gap-4 mt-6">
            <div className="bg-white bg-opacity-10 rounded-lg p-3 text-center">
              <p className="text-green-200 text-sm font-medium">Receitas</p>
              <p className="text-xl font-bold">{formatCurrency(totalReceitas)}</p>
            </div>
            <div className="bg-white bg-opacity-10 rounded-lg p-3 text-center">
              <p className="text-red-200 text-sm font-medium">Despesas</p>
              <p className="text-xl font-bold">{formatCurrency(totalDespesas)}</p>
            </div>
            <div className="bg-white bg-opacity-10 rounded-lg p-3 text-center">
              <p className="text-blue-200 text-sm font-medium">Saldo</p>
              <p className={`text-xl font-bold ${saldoDia >= 0 ? 'text-green-200' : 'text-red-200'}`}>
                {formatCurrency(saldoDia)}
              </p>
            </div>
          </div>
        </div>
        
        {/* Conteúdo do Modal */}
        <div className="p-6 overflow-y-auto max-h-[60vh]">
          {loading ? (
            <div className="flex items-center justify-center py-12">
              <div className="animate-spin w-8 h-8 border-4 border-blue-200 border-t-blue-600 rounded-full"></div>
              <span className="ml-3 text-gray-600">Carregando movimentações...</span>
            </div>
          ) : movimentacoes.length === 0 ? (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Calendar size={32} className="text-gray-400" />
              </div>
              <h3 className="text-lg font-medium text-gray-800 mb-2">
                Nenhuma movimentação registrada
              </h3>
              <p className="text-gray-600 mb-4">
                Não há receitas ou despesas cadastradas para este dia.
              </p>
              <button
                onClick={handleAddNew}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Adicionar primeira movimentação
              </button>
            </div>
          ) : (
            <div className="space-y-4">
              {/* Botão para adicionar nova movimentação */}
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-lg font-semibold text-gray-800">
                  Movimentações ({movimentacoes.length})
                </h3>
                <button
                  onClick={handleAddNew}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Plus size={18} />
                  <span>Nova movimentação</span>
                </button>
              </div>
              
              {/* Lista de movimentações */}
              <div className="space-y-3">
                {movimentacoes.map(movimentacao => (
                  <MovimentacaoItem 
                    key={movimentacao.id} 
                    movimentacao={movimentacao} 
                  />
                ))}
              </div>
            </div>
          )}
        </div>
        
        {/* Footer do Modal */}
        <div className="border-t border-gray-200 p-4 bg-gray-50">
          <div className="flex justify-between items-center">
            <div className="text-sm text-gray-600">
              {movimentacoes.length} movimentação(ões) encontrada(s)
            </div>
            <div className="flex space-x-3">
              <button
                onClick={handleClose}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                Fechar
              </button>
              <button
                onClick={handleAddNew}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Adicionar movimentação
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

DetalhesDoDiaModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  dia: PropTypes.shape({
    dia: PropTypes.number,
    mes: PropTypes.number,
    ano: PropTypes.number,
    movimentacoes: PropTypes.array
  })
};

export default DetalhesDoDiaModal;