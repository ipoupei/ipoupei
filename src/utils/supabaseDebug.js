// src/utils/supabaseDebug.js - VERIFICADOR DE CONFIGURA√á√ÉO
import { supabase } from '../lib/supabaseClient';

/**
 * Utilit√°rio para diagnosticar problemas de configura√ß√£o do Supabase
 * Use no console do navegador para verificar se tudo est√° configurado corretamente
 */
export const debugSupabase = async () => {
  console.log('üîç === DIAGN√ìSTICO SUPABASE ===');
  
  // 1. Verificar vari√°veis de ambiente
  console.log('\nüìã 1. VARI√ÅVEIS DE AMBIENTE:');
  console.log('REACT_APP_SUPABASE_URL:', process.env.REACT_APP_SUPABASE_URL ? '‚úÖ Configurado' : '‚ùå N√ÉO CONFIGURADO');
  console.log('REACT_APP_SUPABASE_ANON_KEY:', process.env.REACT_APP_SUPABASE_ANON_KEY ? '‚úÖ Configurado' : '‚ùå N√ÉO CONFIGURADO');
  
  if (!process.env.REACT_APP_SUPABASE_URL || !process.env.REACT_APP_SUPABASE_ANON_KEY) {
    console.log('\n‚ùå PROBLEMA ENCONTRADO:');
    console.log('As vari√°veis de ambiente do Supabase n√£o est√£o configuradas.');
    console.log('Crie um arquivo .env na raiz do projeto com:');
    console.log('REACT_APP_SUPABASE_URL=sua_url_aqui');
    console.log('REACT_APP_SUPABASE_ANON_KEY=sua_chave_aqui');
    return;
  }
  
  // 2. Verificar conex√£o
  console.log('\nüåê 2. TESTANDO CONEX√ÉO:');
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.log('‚ùå Erro na conex√£o:', error.message);
    } else {
      console.log('‚úÖ Conex√£o estabelecida com sucesso');
      console.log('Sess√£o atual:', data.session ? 'Usu√°rio logado' : 'Nenhum usu√°rio');
    }
  } catch (err) {
    console.log('‚ùå Erro inesperado na conex√£o:', err.message);
  }
  
  // 3. Verificar tabelas
  console.log('\nüìä 3. TESTANDO ACESSO √ÄS TABELAS:');
  const tabelas = ['perfil_usuario', 'categorias', 'contas', 'transacoes', 'cartoes'];
  
  for (const tabela of tabelas) {
    try {
      const { data, error } = await supabase
        .from(tabela)
        .select('*')
        .limit(1);
        
      if (error) {
        console.log(`‚ùå ${tabela}:`, error.message);
      } else {
        console.log(`‚úÖ ${tabela}: Acesso OK`);
      }
    } catch (err) {
      console.log(`‚ùå ${tabela}: Erro inesperado -`, err.message);
    }
  }
  
  // 4. Verificar pol√≠ticas de seguran√ßa (RLS)
  console.log('\nüîê 4. VERIFICANDO POL√çTICAS DE SEGURAN√áA:');
  try {
    // Tentar criar um usu√°rio de teste
    const { data, error } = await supabase.auth.signUp({
      email: 'teste-debug@exemplo.com',
      password: '123456',
    });
    
    if (error) {
      if (error.message.includes('User already registered')) {
        console.log('‚úÖ Registro funcionando (usu√°rio j√° existe)');
      } else {
        console.log('‚ùå Erro no registro:', error.message);
      }
    } else {
      console.log('‚úÖ Registro funcionando');
    }
  } catch (err) {
    console.log('‚ùå Erro inesperado no teste de registro:', err.message);
  }
  
  // 5. Verificar configura√ß√µes de autentica√ß√£o
  console.log('\nüîë 5. CONFIGURA√á√ïES DE AUTENTICA√á√ÉO:');
  console.log('Para verificar no Supabase Dashboard:');
  console.log('- Authentication > Settings');
  console.log('- Verificar se "Enable email confirmations" est√° configurado conforme necess√°rio');
  console.log('- Verificar Site URL e Redirect URLs');
  
  console.log('\nüéØ RESUMO:');
  console.log('Se todos os itens acima est√£o ‚úÖ, o problema pode ser:');
  console.log('1. Cache do navegador - tente limpar');
  console.log('2. Configura√ß√£o incorreta no Supabase Dashboard');
  console.log('3. Problema de rede/firewall');
  console.log('4. Pol√≠ticas RLS muito restritivas');
  
  console.log('\nüí° PR√ìXIMOS PASSOS:');
  console.log('1. Verificar o console do navegador durante o login');
  console.log('2. Verificar a aba Network para ver as requisi√ß√µes');
  console.log('3. Testar com um email/senha conhecidos');
  console.log('4. Verificar se o email foi confirmado (se necess√°rio)');
};

/**
 * Teste r√°pido de login
 */
export const testLogin = async (email = 'teste@exemplo.com', password = '123456') => {
  console.log('üß™ Testando login com:', email);
  
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    
    if (error) {
      console.log('‚ùå Erro no login:', error.message);
      
      // Diagn√≥stico espec√≠fico por tipo de erro
      if (error.message.includes('Invalid login credentials')) {
        console.log('üí° Poss√≠vel solu√ß√£o: Verificar se o usu√°rio existe e a senha est√° correta');
      } else if (error.message.includes('Email not confirmed')) {
        console.log('üí° Poss√≠vel solu√ß√£o: Confirmar email ou desabilitar confirma√ß√£o no Supabase');
      }
    } else {
      console.log('‚úÖ Login bem-sucedido!');
      console.log('Usu√°rio:', data.user.email);
      console.log('Sess√£o criada:', !!data.session);
    }
  } catch (err) {
    console.log('‚ùå Erro inesperado:', err.message);
  }
};

/**
 * Verificar status atual da autentica√ß√£o
 */
export const checkAuthStatus = async () => {
  console.log('üë§ Status atual da autentica√ß√£o:');
  
  try {
    const { data, error } = await supabase.auth.getUser();
    
    if (error) {
      console.log('‚ùå Erro ao obter usu√°rio:', error.message);
    } else if (data.user) {
      console.log('‚úÖ Usu√°rio logado:', data.user.email);
      console.log('ID:', data.user.id);
      console.log('Email confirmado:', data.user.email_confirmed_at ? 'Sim' : 'N√£o');
      console.log('√öltimo login:', data.user.last_sign_in_at);
    } else {
      console.log('‚ÑπÔ∏è Nenhum usu√°rio logado');
    }
  } catch (err) {
    console.log('‚ùå Erro inesperado:', err.message);
  }
};

/**
 * For√ßar logout e limpar dados
 */
export const forceLogout = async () => {
  console.log('üö™ For√ßando logout...');
  
  try {
    const { error } = await supabase.auth.signOut();
    
    if (error) {
      console.log('‚ùå Erro no logout:', error.message);
    } else {
      console.log('‚úÖ Logout realizado com sucesso');
      
      // Limpar localStorage
      localStorage.clear();
      console.log('üßπ LocalStorage limpo');
      
      // Recarregar p√°gina
      window.location.reload();
    }
  } catch (err) {
    console.log('‚ùå Erro inesperado:', err.message);
  }
};

// Expor fun√ß√µes globalmente para uso no console
if (typeof window !== 'undefined') {
  window.debugSupabase = debugSupabase;
  window.testLogin = testLogin;
  window.checkAuthStatus = checkAuthStatus;
  window.forceLogout = forceLogout;
  
  console.log('üîß Fun√ß√µes de debug dispon√≠veis:');
  console.log('- debugSupabase() - Diagn√≥stico completo');
  console.log('- testLogin(email, password) - Testar login');
  console.log('- checkAuthStatus() - Verificar status atual');
  console.log('- forceLogout() - For√ßar logout');
}

export default {
  debugSupabase,
  testLogin,
  checkAuthStatus,
  forceLogout
};